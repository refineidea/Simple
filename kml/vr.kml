<!--
	VR UI
-->

<krpano>
	
	<_
		auto_vr="false"
		onclick_flag="true"
		pages="0"
		current_page="1"
		cols="0"
		last_row_cols="0"
		rows="0"
		ath_step="22.5"
		k="0"
		state="closed"
	/>

	<style name="simple_vr_tile"

		keep="true"

		distorted="true"
		depth="1000"
		width="180"
		height="120"
		zorder="10"

		visible="false"
		alpha="0"

		vr="true"

		my_page="0"
		my_col="0"
		my_row="0"
		my_oy="0"
		my_ath="0"

		oy="0"

		linkedscene=""

		onover="
			vr_auto_click();
			tween(depth, 950, 0.25);
		"
		onout="
			tween(depth, 1000, 0.25);
		"

		onclick="
			get_current_tile_list();
			hide_hotspot_list_recurrent(hotspot_list.count);
			hide_background();

			txtadd(_.thumb_name, 'thumb_', get(scene[get(linkedscene)].index));
			callwith(layer[get(_.thumb_name)], onclick);

			delayedcall(0.5,
				loadscene(get(linkedscene), null, MERGE, OPENBLEND(1, 0.0, 1, 0, linear));
			);
		"

		show="
			set(visible, true);
			calc(ath, my_ath + _.hlookat);
			tween(alpha, 1);
		"

		hide="
			tween(alpha, 0, , ,
				set(visible, false);
			);
		"
	/>

	<style name="slider_mark_proto"
		keep="true"
		url="../img/slider_mark.png"

		crop="0|0|50|50"
		crop_empty="0|0|50|50"
		crop_filled="50|0|50|50"

		width="50"
		height="50"
		scale="0.7"
		alpha="0"
		visible="false"

		vr="true"

		distorted="true"
		depth="1000"
		atv="-25"
		my_ath="0"

		linkedpage="0"

		onover="
			vr_auto_click();
			tween(depth, 950, 0.25);
		"
		onout="
			tween(depth, 1000, 0.25);
		"

		onclick="
			calc(_.delta, linkedpage - _.current_page);
			next_page(get(_.delta));
		"

		show="
			calc(ath, _.hlookat + my_ath);
			set(visible, true);
			tween(alpha, 1, 0.5);
		"

		hide="
			set(visible, true);
			tween(alpha, 0, 0.5);
		"
	/>

	<hotspot
		name="tiles"
		keep="true"
		url="../img/tiles.png"
		crop="0|0|80|80"

		visible="false"

		scale="0.7"
		enabled="true"
		alpha="1"

		vr="true"

		ath="0"
		atv="30"
		depth="1000"
		distorted="true"

		onover="
			vr_auto_click();
			tween(depth, 950, 0.25);
		"
		onout="
			tween(depth, 1000, 0.25);
		"

		onclick="
			tween(depth, 1000, 0.25);
			if (_.state == 'closed',
				hide_vr_hotspots();
				next_page(0);
			,
				get_current_tile_list();
				hide_hotspot_list_recurrent(hotspot_list.count);
				hide_background();
				hide_slider_marks();
				show_vr_hotspots();
			);
		"
	/>

	<hotspot
		name="next_page"
		keep="true"
		url="../img/forward.png"

		scale="0.7"
		enabled="true"
		visible="false"
		alpha="0"
		alpha_enabled="1"
		alpha_disabled="0.25"

		vr="true"

		my_ath="40"
		ath="0"
		atv="0"
		depth="1000"
		distorted="true"

		onover="
			vr_auto_click();
			tween(depth, 950, 0.25);
		"
		onout="
			tween(depth, 1000, 0.25);
		"

		onclick="
			next_page(1);
		"

		show="
			calc(ath, view.hlookat + my_ath);
			set(visible, true);
			if (enabled,
				tween(alpha, get(alpha_enabled), 0.5);
			,
				tween(alpha, get(alpha_disabled), 0.5);
			);
			
		"

		hide="
			tween(alpha, 0, 0.5, , 
				set(visible, false);
			);
		"

		update_state="
			if (enabled,
				set(alpha, 1);
			,
				set(alpha, 0.5);
			);
		"
	/>

	<hotspot
		name="prev_page"
		keep="true"
		url="../img/forward.png"

		scale="0.7"
		rotate="180"
		enabled="false"
		visible="false"
		alpha="0"
		alpha_enabled="1"
		alpha_disabled="0.25"

		vr="true"

		my_ath="-40"
		ath="0"
		atv="0"
		depth="1000"
		distorted="true"

		onover="
			vr_auto_click();
			tween(depth, 950, 0.25);
		"
		onout="
			tween(depth, 1000, 0.25);
		"


		onclick="
			next_page(-1);
		"

		show="
			calc(ath, view.hlookat + my_ath);
			set(visible, true);
			if (enabled,
				tween(alpha, get(alpha_enabled), 0.5);
			,
				tween(alpha, get(alpha_disabled), 0.5);
			);
		"

		hide="
			tween(alpha, 0, 0.5, , 
				set(visible, false);
			);
		"

		update_state="
			if (enabled,
				set(alpha, 1);
			,
				set(alpha, 0.5);
			);
		"
	/>

	<!-- 
		%1 â€“ +1, 0 or -1
	-->
	<action name="next_page">

		if (%1 == 0,

			copy(_.hlookat, view.hlookat);

			if (_.state == 'closed',
				show_background();
				show_slider_marks();
				update_pagination();

				get_current_tile_list();
				show_hotspot_list_recurrent(hotspot_list.count);
			);
		,
			get_current_tile_list();
			hide_hotspot_list_recurrent(hotspot_list.count, 

				add(_.current_page, %1);
				clamp(_.current_page, 1, get(_.pages));

				update_pagination();

				update_slider_marks();

				get_current_tile_list();
				show_hotspot_list_recurrent(hotspot_list.count);
			);
		);

	</action>

	<action name="update_pagination">

		if ((_.current_page == 1) AND (_.current_page == _.pages),
			set(hotspot[prev_page].enabled, false);
			set(hotspot[next_page].enabled, false);

			set(hotspot[prev_page].visible, false);
			set(hotspot[next_page].visible, false);
		,
			if ((_.current_page GT 1) AND (_.current_page LT _.pages),
				set(hotspot[prev_page].enabled, true);
				set(hotspot[next_page].enabled, true);
			,
				if (_.current_page == 1,
					set(hotspot[prev_page].enabled, false);
					set(hotspot[next_page].enabled, true);
				,
					if (_.current_page == _.pages,
						set(hotspot[next_page].enabled, false);
						set(hotspot[prev_page].enabled, true);							
					);
				);
			);					
		);

		callwith(hotspot[prev_page], hotspot[prev_page].update_state);
		callwith(hotspot[next_page], hotspot[next_page].update_state);

	</action>

	<action name="add_tiles">

		if (scene.count LE 9,
			set(_.pages, 1);
		,
			div(_.pages, scene.count, 9);
			Math.ceil(_.pages);
		);

		mod(_.last_page, scene.count, 9);

		if (_.last_page == 0,
			copy(_.full_pages_count, _.pages);
		,
			calc(_.full_pages_count, _.pages - 1);
		);

		for (set(_.p, 0), _.p LT _.pages, inc(_.p),

			if (_.pages == 1,
				copy(_.tiles_on_page, scene.count);
			,				
				if (_.p LT _.full_pages_count,
					set(_.tiles_on_page, 9);
				,
					copy(_.tiles_on_page, _.last_page);
				);
			);
			
			if (_.tiles_on_page LE 3,
				copy(_.cols, _.tiles_on_page);
				set(_.rows, 1);
			,
				if (_.tiles_on_page == 4,
					set(_.cols, 2);
					set(_.rows, 2);
					set(_.last_row_cols, 0);
				,
					set(_.cols, 3);
					calc(_.rows, _.tiles_on_page / _.cols);
					Math.ceil(_.rows);
					mod(_.last_row_cols, _.tiles_on_page, _.cols);
				);				
			);

			calc(_.k, _.p * 9);
			for (set(_.i, 0), _.i LT _.rows, inc(_.i),

				calc(_.last_row_index, _.rows - 1);

				if ((_.i == _.last_row_index) AND (_.last_row_cols != 0),
					copy(_.cols, _.last_row_cols);
				);

				for (set(_.j, 0), _.j LT _.cols, inc(_.j),


					txtadd(_.tile_name, 'tile_', get(_.k));
					addhotspot(get(_.tile_name));

					hotspot[get(_.tile_name)].loadstyle('simple_vr_tile');
					copy(hotspot[get(_.tile_name)].url, scene[get(_.k)].vr_thumburl);

					copy(hotspot[get(_.tile_name)].my_page, _.p);
					copy(hotspot[get(_.tile_name)].my_col, _.j);
					copy(hotspot[get(_.tile_name)].my_row, _.i);

					copy(hotspot[get(_.tile_name)].linkedscene, scene[get(_.k)].name);

					if (_.rows == 1,
						copy(hotspot[get(_.tile_name)].my_oy, 0);
					,
						if (_.rows == 2,
							calc(hotspot[get(_.tile_name)].my_oy, 130 * _.i - 65);
						,
							if (_.rows == 3,
								calc(hotspot[get(_.tile_name)].my_oy, 130 * (_.i - 1));
							);		
						);
					);

					if (_.cols == 3,
						calc(hotspot[get(_.tile_name)].my_ath, 22.5 * (_.j - 1));
					,
						if (_.cols == 2,
							calc(hotspot[get(_.tile_name)].my_ath, 22.5 * _.j - 11.25);
						,
							copy(hotspot[get(_.tile_name)].my_ath, 0);
						);
					);

					copy(hotspot[get(_.tile_name)].ath, hotspot[get(_.tile_name)].my_ath);
					copy(hotspot[get(_.tile_name)].oy, hotspot[get(_.tile_name)].my_oy);

					inc(_.k);
				);
			);
		);

	</action>

	<action name="get_current_tile_list">

		switch(hotspot[tiles].crop, '80|0|80|80', '0|0|80|80');

		if (_.pages == 1,
			if (scene.count LE 3,
				copy(_.cols,  scene.count);
				set(_.rows, 1);
			,
				calc(_.rows,  scene.count / _.cols);
				Math.ceil(_.rows);
				mod(_.last_row_cols, scene.count, _.cols);
			);
		,
			if (_.current_page LE _.full_pages_count,
				set(_.cols, 3);
				set(_.rows, 3);
				set(_.last_row_cols, 0);
			,
				if (_.last_page LE 3,
					copy(_.cols, _.last_page);
					set(_.rows, 1);
					set(_.last_row_cols, 0);
				,
					if (_.last_page == 4,
						set(_.cols, 2);
						set(_.rows, 2);
						set(_.last_row_cols, 0);
					,
						set(_.cols, 3);
						calc(_.rows, _.last_page / _.cols);
						Math.ceil(_.rows);
						mod(_.last_row_cols, _.last_page, _.cols);
					);					
				);
			);
		);

		set(_.k, 0);

		for (set(_.i, 0), _.i LT _.rows, inc(_.i),

			calc(_.last_row_index, _.rows - 1);

			if ((_.i == _.last_row_index) AND (_.last_row_cols != 0),
				copy(_.cols, _.last_row_cols);
			);

			for (set(_.j, 0), _.j LT _.cols, inc(_.j),

				calc(_.current_tile_index, (_.current_page - 1) * 9 + _.k);
				txtadd(hotspot_list[get(_.k)].name, 'tile_', get(_.current_tile_index));	
				inc(_.k);
			);
		);

	</action>

	<action name="add_slider_marks">

		for(set(_.i, 1), _.i LE _.pages, inc(_.i),

			txtadd(_.slider_mark_name, 'pagemark_', get(_.i));
			addhotspot(get(_.slider_mark_name));
			
			hotspot[get(_.slider_mark_name)].loadstyle('slider_mark_proto');

			copy(hotspot[get(_.slider_mark_name)].linkedpage, _.i);

			if (_.i == _.current_page,
				copy(hotspot[get(_.slider_mark_name)].crop, hotspot[get(_.slider_mark_name)].crop_filled);
			);			

			calc(hotspot[get(_.slider_mark_name)].my_ath, -4*(_.pages - 1)/2 + 4*(_.i - 1));

		);

	</action>

	<action name="show_slider_marks">

		if (_.pages GT 1,
			for(set(_.i, 1), _.i LE _.pages, inc(_.i),

				txtadd(_.slider_mark_name, 'pagemark_', get(_.i));
				callwith(hotspot[get(_.slider_mark_name)], hotspot[get(_.slider_mark_name)].show());
			);
		);	

	</action>

	<action name="hide_slider_marks">

		if (_.pages GT 1,

			for(set(_.i, 1), _.i LE _.pages, inc(_.i),

				txtadd(_.slider_mark_name, 'pagemark_', get(_.i));
				callwith(hotspot[get(_.slider_mark_name)], hotspot[get(_.slider_mark_name)].hide());
			);
		);

	</action>

	<action name="update_slider_marks">
		if (_.pages GT 1,
			for(set(_.i, 1), _.i LE _.pages, inc(_.i),

				txtadd(_.slider_mark_name, 'pagemark_', get(_.i));
				if (_.i == _.current_page,
					copy(hotspot[get(_.slider_mark_name)].crop, hotspot[get(_.slider_mark_name)].crop_filled);
				,
					copy(hotspot[get(_.slider_mark_name)].crop, hotspot[get(_.slider_mark_name)].crop_empty);
				);
			);
		);
	</action>

	<action name="hide_background">
		tween(hotspot[bg_f].alpha|hotspot[bg_r].alpha|hotspot[bg_b].alpha|hotspot[bg_l].alpha|hotspot[bg_u].alpha|hotspot[bg_d].alpha, 0|0|0|0|0|0, 0.5, ,

			set(hotspot[bg_f].visible, false);
			set(hotspot[bg_r].visible, false);
			set(hotspot[bg_b].visible, false);
			set(hotspot[bg_l].visible, false);
			set(hotspot[bg_u].visible, false);
			set(hotspot[bg_d].visible, false);
		);

		callwith(hotspot[next_page], hotspot[next_page].hide);
		callwith(hotspot[prev_page], hotspot[next_page].hide);
	</action>

	<action name="show_background">
		set(hotspot[bg_f].visible, true);
		set(hotspot[bg_r].visible, true);
		set(hotspot[bg_b].visible, true);
		set(hotspot[bg_l].visible, true);
		set(hotspot[bg_u].visible, true);
		set(hotspot[bg_d].visible, true);

		tween(hotspot[bg_f].alpha|hotspot[bg_r].alpha|hotspot[bg_b].alpha|hotspot[bg_l].alpha|hotspot[bg_u].alpha|hotspot[bg_d].alpha, 1|1|1|1|1|1);

		callwith(hotspot[next_page], hotspot[next_page].show);
		callwith(hotspot[prev_page], hotspot[next_page].show);
	</action>

	<!-- 
		This function hides tiles recurrently,
		so all donecalls could be executed.

		%1 â€“ count of tiles to hide.
		%2 â€“ donecall
	-->
	<action name="hide_hotspot_list_recurrent">

		set(_.state, 'closed');

		calc(_.j, %1 - 1);

		if (%1 GE 1,
			set(_.hs_name, get(hotspot_list[get(_.j)].name));

			hotspot_list.removearrayitem(get(_.j));

			callwith(hotspot[get(_.hs_name)], hotspot[get(_.hs_name)].hide());
			delayedcall(0, hide_hotspot_list_recurrent(get(_.j), %2));
		,
			delayedcall(0.2, %2);
		);

	</action>

	<action name="show_hotspot_list_recurrent">

		set(_.state, 'open');

		calc(_.j, %1 - 1);

		if (%1 GE 1,
			set(_.hs_name, get(hotspot_list[get(_.j)].name));

			hotspot_list.removearrayitem(get(_.j));

			callwith(hotspot[get(_.hs_name)], hotspot[get(_.hs_name)].show());
			delayedcall(0, show_hotspot_list_recurrent(get(_.j)));
		);

	</action>

	<action name="vr_menu_following" type="Javascript" devices="html5"><![CDATA[

		var hs1 = krpano.get("hotspot[reload]");
		var hs2 = krpano.get("hotspot[tiles]");

		if(!hs1.hovering)
		{
			var f = 0.01;	// follow speed factor

			var h = krpano.view.hlookat;
			var v = krpano.view.vlookat;
			var hsh = hs1.ath;
			var hsv = hs1.atv;

			h   = (h  -(h|0))   + (((h|0)  +360180)%360) - 180.0;
			hsh = (hsh-(hsh|0)) + (((hsh|0)+360180)%360) - 180.0;

			dh = h - hsh;
			dh += (dh>180) ? -360 : (dh<-180) ? 360 : 0

			hsh += dh*f;

			var a = Math.max(Math.abs(v - hs1.atv) / 90, Math.abs(h - hs1.ath) / 90);
			a = Math.max(1.0 - 2.0*Math.sqrt(a), 0);

			v = v + 55.0 - v*1.5;
			hsv = hsv*(1-f) + v*f;

			hs2.ath = hs1.ath = hsh;
			hs1.alpha = a;

		}

	]]></action>

	<hotspot name="bg_f"
		keep="true"
		url="../img/bg.png"

		distorted="true"
		depth="off"
		enabled="false"
		vr="true"

		visible="false"
		alpha="0"

		width="1000"
		height="1000"
		ath="0"
		atv="0"
	/>

	<hotspot name="bg_r"
		keep="true"
		url="../img/bg.png"

		distorted="true"
		depth="off"
		enabled="false"
		vr="true"

		visible="false"
		alpha="0"

		width="1000"
		height="1000"
		ath="90"
		atv="0"
	/>

	<hotspot name="bg_b"
		keep="true"
		url="../img/bg.png"

		distorted="true"
		depth="off"
		enabled="false"
		vr="true"

		visible="false"
		alpha="0"

		width="1000"
		height="1000"
		ath="-180"
		atv="0"
	/>

	<hotspot name="bg_l"
		keep="true"
		url="../img/bg.png"

		distorted="true"
		depth="off"
		enabled="false"
		vr="true"

		visible="false"
		alpha="0"

		width="1000"
		height="1000"
		ath="-90"
		atv="0"
	/>

	<hotspot name="bg_u"
		keep="true"
		url="../img/bg.png"

		distorted="true"
		depth="off"
		enabled="false"
		vr="true"

		visible="false"
		alpha="0"

		width="1000"
		height="1000"
		ath="0"
		atv="-90"
	/>

	<hotspot name="bg_d"
		keep="true"
		url="../img/bg.png"

		distorted="true"
		depth="off"
		enabled="false"
		vr="true"

		visible="false"
		alpha="0"

		width="1000"
		height="1000"
		ath="0"
		atv="90"
	/>
	
</krpano>
